**Context: This Android application is designed for Airsoft players to collect game-day telemetry. It focuses on recording player movement via GPS and key in-game events like hits, respawns, and kills. The goal is to provide local data for post-game analysis and improvement of gameplay strategies.**

I need to develop a minimal Android application using **Kotlin** and **Jetpack Compose** within **VS Code**, leveraging **GitHub Copilot** for development assistance. The app must store all data **locally on the device** and **will not use any cloud services**. A critical requirement is its ability to **run in the background** and continue collecting GPS data even when the device screen is off.

**Crucially, all UI elements, including inputs and buttons, must fit into a single phone screen without requiring scrolling. The app should default to a dark mode theme to optimize battery usage.**

The application's core features include:

1.  **Local Data Storage (Room Database - Foundational):**
    * Implement the **Room Persistence Library** to store all game-related events and location data.
    * Define a Room `Entity` named `GameEvent` with the following properties:
        * `id` (Long, auto-generated primary key)
        * `gameSessionId` (String)
        * `playerId` (String, populated from user input)
        * `eventType` (String, e.g., "HIT", "RESPAWN", "KILL", "LOCATION")
        * `timestamp` (Long, `System.currentTimeMillis()`)
        * `latitude` (Double)
        * `longitude` (Double)
    * Implement a Room `Dao` (Data Access Object) for inserting `GameEvent` records and for retrieving all records for export, as well as a method for clearing all data.

2.  **Background Operation (Foreground Service):**
    * Implement a **Foreground Service** in Kotlin. This service must run continuously in the background, providing a persistent notification to the user. All location tracking logic will reside within this service.

3.  **User Input & Persistence (Compact UI):**
    * Implement a compact `TextField` for the user's **player name**. This name must be saved persistently across app launches (e.g., using `SharedPreferences`).
    * Implement a compact UI element (e.g., a `DropdownMenu` or horizontally arranged `RadioButtons`) for selecting the **location tracking interval** (e.g., "5s", "10s", "30s", "60s"). This selected interval must also be saved persistently. *Ensure these inputs fit on the single screen.*

4.  **Game Session Management (Compact UI):**
    * Display prominent **"Start"**, **"Pause"**, and **"Stop"** buttons. These should be laid out efficiently (e.g., a `Row`).
        * **Start:** Initiates a new game session. A unique `gameSessionId` (e.g., a UUID) is generated. The foreground service is started, and location tracking begins using the user's saved player name and selected interval.
        * **Pause:** Temporarily halts GPS location data collection within the active foreground service. The service itself remains running.
        * **Stop:** Terminates the current game session. The foreground service is stopped, ending all background data collection for that session.

5.  **Event Capture (Compact UI):**
    * Provide three clearly labeled, compact buttons: **"Hit"**, **"Respawn"**, and **"Kill"**. Tapping these buttons must record the respective `GameEvent` with current GPS location and timestamp. Arrange them efficiently (e.g., a small `Row` or `Column`).

6.  **GPS Location Tracking:**
    * Within the foreground service, continuously capture the device's **GPS location (latitude and longitude)** at the user-specified interval. The **Fused Location Provider API** is the preferred method for this.
    * Each captured location update must be stored as a `GameEvent` record with its precise timestamp and `eventType` "LOCATION".

7.  **Mandatory Data Export (CSV):**
    * Include a dedicated **"Export Data" button** on the main UI.
    * When pressed, retrieve **all stored `GameEvent` data** from the Room database.
    * Format this data into a **CSV (Comma Separated Values) file**. The filename should be descriptive (e.g., `airsoft_data_YYYYMMDD_HHMMSS.csv`).
    * Provide a mechanism for the user to **download or share this CSV file** using Android's **Storage Access Framework (SAF)** to allow user-selected save locations and an `Intent` to offer sharing options (e.g., email, cloud drives).

8.  **Data Clearing Feature:**
    * Add a **"Clear Data" button** (or a similar compact UI element) to the app.
    * When activated, this feature must **permanently delete all stored `GameEvent` data from the Room database**.
    * A confirmation dialog (e.g., an `AlertDialog`) must precede the deletion to prevent accidental data loss.

9.  **User Interface (Single Screen, Dark Mode First):**
    * Design the entire UI within a single Jetpack Compose `Composable` function. All required elements (inputs, control buttons, event buttons, export button, clear data feature) must be visible **without requiring any scrolling** on a typical phone screen.
    * The app's default theme must be **Dark Mode** to conserve battery life. Implement this using Jetpack Compose's theming capabilities, overriding system settings if necessary to enforce dark mode.
    * Provide immediate, concise visual feedback (e.g., a `Toast`, `Snackbar`, or a small, auto-updating text area) for user actions (e.g., event recorded, data exported, data cleared, service status).
    * Employ Compose's layout components (`Column`, `Row`, `Spacer`, `Modifier.weight()`, `Arrangement`, `Modifier.fillMaxWidth()`, `Modifier.wrapContentHeight()`) for highly efficient space utilization. For current event display, only show the most recent event for brevity.

10. **Permissions Management:**
    * Request all necessary runtime permissions gracefully, including **`ACCESS_FINE_LOCATION`**, **`ACCESS_COARSE_LOCATION`**, and permissions required for **file storage/export via SAF**. Handle permission request results effectively.

11. **Battery Optimization:**
    * Implement best practices for battery efficiency within the foreground service, leveraging the user-configured location interval and considering `PRIORITY_BALANCED_POWER_ACCURACY` for location requests when high precision is not constantly critical to balance accuracy and power consumption.